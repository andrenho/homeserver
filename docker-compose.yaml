version: '3.9'

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

secrets:
  aws_credentials:
    file: "${HOME}/.aws/credentials"

services:

  # 
  # One shot / cron
  #

  certificate:
    build: certificate
    container_name: certificate
    restart: unless-stopped
    secrets:
      - source: aws_credentials
        target: /root/.aws/credentials
    volumes:
      - "${DATA_DIR}/certificate/var:/var/lib/letsencrypt"
      - "${CERTS_DIR}:/etc/letsencrypt"
    environment:
      EMAIL: ${EMAIL}
      DOMAIN: ${HOST_DOMAIN}
      EXTRA_PARAMS: ${CERTBOT_EXTRA_PARAMS}

  # 
  # Supporting services
  #

  backup:
    build: backup
    container_name: backup
    restart: always
    volumes:
      - "${DATA_DIR}:/data:ro"
      - "${CERTS_DIR}:/certs:ro"
    environment:
      BUCKET_NAME: ${BACKUP_BUCKET}
    secrets:
      - source: aws_credentials
        target: /root/.aws/credentials
  
  dynamicdns:
    build: dynamicdns
    container_name: dynamicdns
    restart: unless-stopped
    image: dynamicdns:latest
    environment:
      RECORD_NAME: ${HOST_DOMAIN}
    secrets:
      - source: aws_credentials
        target: /root/.aws/credentials
  
  # 
  # Deamons
  # 

  ftp:
    image: stilliard/pure-ftpd
    container_name: ftp
    restart: unless-stopped
    volumes:
      - "${VOLUME_DIR}:/home/admin/volume"
      - "${DATA_DIR}:/home/admin/data"
    ports:
      - "${P}21:21"
      - "30000-30009:30000-30009"
    environment:
      PUBLICHOST: "172.28.0.1"
      FTP_USER_NAME: ${USERNAME}
      FTP_USER_PASS: ${PASSWORD}
      FTP_USER_HOME: /home/admin
      FTP_USER_UID: ${DATA_UID}
      FTP_USER_GID: ${DATA_GID}
      ADDED_FLAGS: "-d -d"

  sftp:
    image: atmoz/sftp:alpine
    container_name: sftp
    restart: unless-stopped
    volumes:
      - "${VOLUME_DIR}:/home/${USERNAME}/volume"
      - "${DATA_DIR}:/home/${USERNAME}/data"
    ports:
      - "${P}2222:22"
    command: "${USERNAME}:${PASSWORD}:${DATA_UID}:${DATA_GID}"

  dlna:
    image: vladgh/minidlna
    container_name: dlna
    volumes:
      - "${VOLUME_DIR}:/media"
    environment:
      - MINIDLNA_MEDIA_DIR=/media
      - MINIDLNA_FRIENDLY_NAME=HomeServer
      - PUID=${DATA_UID}
      - GUID=${DATA_GID}
      - TZ=America/Sao_Paulo
    network_mode: host

  mqtt:
    image: eclipse-mosquitto
    container_name: mqtt
    restart: unless-stopped
    volumes:
      - "./mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro"
      - "${DATA_DIR}/mqtt:/mosquitto/data"
    ports:
      - "${P}1883:1883"

  #
  # Proxy
  #

  proxy:
    image: nginx:latest
    container_name: proxy
    restart: unless-stopped
    volumes:
      - "./proxy/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./proxy/templates:/etc/nginx/templates:ro"
      - "${CERTS_DIR}:/certs:ro"
      - "${HTPASSWD_FILE}:/etc/nginx/.htpasswd:ro"
    environment:
      HOST_DOMAIN: "${HOST_DOMAIN}"
    ports:
      - "${P}443:443"
      - "${P}7443:7443"
      - "${P}7444:7444"

  # 
  # Web services (public)
  # 

  plex:
    image: lscr.io/linuxserver/plex
    container_name: plex
    network_mode: host
    environment:
      - PUID=${DATA_UID}
      - PGID=${DATA_GID}
      - VERSION=docker
    volumes:
      - "${DATA_DIR}/plex:/config"
      - "${VOLUME_DIR}/movies:/movies"
      - "${VOLUME_DIR}/tv:/tv"
  
  #
  # Web services (behind proxy)
  #

  homepage:
    image: dragas/thttpd
    container_name: homepage
    volumes:
      - "./homepage:/var/www/http:ro"
  
  hello:
    image: lmmendes/http-hello-world
    container_name: hello
    restart: unless-stopped
      
  torrent:
    image: cr.hotio.dev/hotio/qbittorrent
    container_name: torrent
    restart: unless-stopped
    environment:
      - PUID=${DATA_UID}
      - GUID=${DATA_GID}
      - UMASK=002
      - TZ=America/Sao_Paulo
    volumes:
      - "${DATA_DIR}/torrent:/config"
      - "${VOLUME_DIR}/downloads:/downloads"
      - "${VOLUME_DIR}/movies:/movies"
      - "${VOLUME_DIR}/tv:/tv"
      - "${VOLUME_DIR}/books:/books"
      - "${VOLUME_DIR}/audiobooks:/audiobooks"
  
  portainer:
    image: cr.portainer.io/portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "${DATA_DIR}/portainer:/data"
    environment:
      - PUID=${DATA_UID}
      - PGID=${DATA_GID}
      - TZ=America/Sao_Paulo
  
  ssh:
    build: ssh
    image: ssh
    container_name: ssh
    restart: unless-stopped
  
  explorer:
    image: filebrowser/filebrowser
    container_name: explorer
    environment:
      - PUID=${DATA_UID}
      - PGID=${DATA_GID}
      - TZ=America/Sao_Paulo
    volumes:
      - "${VOLUME_DIR}:/srv"
      - "${DATA_DIR}/explorer/filebrowser.db:/database.db"
      - "${DATA_DIR}/explorer/settings.json:/.filebrowser.json"
  
  openbooks:
    image: evanbuss/openbooks
    container_name: openbooks
    restart: unless-stopped
    command: --persist
    volumes:
      - "${VOLUME_DIR}/books:/books"
  
  audioserve:
    image: izderadicka/audioserve
    container_name: audioserve
    restart: unless-stopped
    command: --tags --transcoding-max-parallel-processes 24 --no-authentication /audiobooks
    environment:
      - PUID=${DATA_UID}
      - PGID=${DATA_GID}
        #- AUDIOSERVE_SHARED_SECRET=changeme
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - "${DATA_DIR}/audioserve:/home/audioserve/.audioserve"
      - "${VOLUME_DIR}/audiobooks:/audiobooks"

  podgrab:
    image: akhilrex/podgrab
    container_name: podgrab
    environment:
      - CHECK_FREQUENCY=30
    volumes:
      - "${DATA_DIR}/podgrab:/config"
      - "${VOLUME_DIR}/podcasts:/assets"
    restart: unless-stopped

  cyberchef:
    image: mpepping/cyberchef
    container_name: cyberchef
    restart: unless-stopped
  
  hoppscotch:
    image: hoppscotch/hoppscotch
    container_name: hoppscotch
    restart: unless-stopped

  dokuwiki:
    image: lscr.io/linuxserver/dokuwiki
    container_name: dokuwiki
    environment:
      - PUID=${DATA_UID}
      - PGID=${DATA_GID}
      - TZ=America/Sao_Paulo
    volumes:
      - "${DATA_DIR}/wiki:/config"
    restart: unless-stopped

  rss:
    image: mockdeep/stringer:0.1
    container_name: rss
    depends_on:
      - rss-db
    restart: unless-stopped
    environment:
      - SECRET_TOKEN=8ef98wef8a
      - PORT=8080
      - DATABASE_URL=postgres://db_user:a8df73gg82@rss-db:5432/stringer

  reader:
    image: kizaing/kavita
    container_name: reader
    restart: unless-stopped
    volumes:
      - "${DATA_DIR}/reader:/kavita/config"
      - "${VOLUME_DIR}/books:/books"
      - "${VOLUME_DIR}/comics:/comics"
    environment:
      - PUID=${DATA_UID}
      - PGID=${DATA_GID}
      - TZ=America/Sao_Paulo
  
  # 
  # Pi-hole
  #
  
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "${P}53:53/tcp"
      - "${P}53:53/udp"
      - "${P}80:80/tcp"
    environment:
      - TZ='America/Sao_Paulo'
      - FTLCONF_REPLY_ADDR4=192.168.15.2
      - PIHOLE_DNS_=8.8.8.8;8.8.4.4
      - VIRTUAL_HOST=pihole.${HOST_DOMAIN}
      - WEBPASSWORD=${PASSWORD}
      - DNSMASQ_LISTENING=all
    volumes:
      - '${DATA_DIR}/pihole/etc/:/etc/pihole/'
      - '${DATA_DIR}/pihole/dnsmasq.d/:/etc/dnsmasq.d/'
    cap_add:
      - NET_ADMIN
    #network_mode: host
    restart: unless-stopped
  
  # 
  # Support services
  #
  
  rss-db:
    image: postgres:9.5-alpine
    container_name: rss-db
    restart: unless-stopped
    volumes:
      - "${DATA_DIR}/rss:/var/lib/postgresql/data"
    environment:
      - POSTGRES_PASSWORD=a8df73gg82
      - POSTGRES_USER=db_user
      - POSTGRES_DB=stringer
  
  #dev:
  #  build: dev
  #  container_name: dev
  #  restart: unless-stopped
  #  hostname: dev
  #  volumes:
  #    - "${HOME}/homeserver/dev:/docker-host"
  #    - "${HOME}/volume/dev:/home/dev"
  #  ports:
  #    - "6969:22"
  #    - "7000:7000"
  #    - "7001:7001"
  #    - "7002:7002"
  #    - "7003:7003"
  #    - "7080:7080"
  #    - "7081:7081"
  

  
  #sonarr:
  #  image: lscr.io/linuxserver/sonarr
  #  container_name: sonarr
  #  environment:
  #    - PUID=1000
  #    - PGID=1000
  #    - TZ=America/Sao_Paulo
  #  volumes:
  #    - "${HOME}/volume/data/sonarr/config:/config"
  #    - "${HOME}/volume/data/sonarr/tv:/tv"
  #    - "${HOME}/volume/downloads:/downloads"
  #  restart: unless-stopped
  #
  #radarr:
  #  image: lscr.io/linuxserver/radarr
  #  container_name: radarr
  #  environment:
  #    - PUID=1000
  #    - PGID=1000
  #    - TZ=America/Sao_Paulo
  #  volumes:
  #    - "${HOME}/volume/data/radarr/config:/config"
  #    - "${HOME}/volume/data/radarr/movies:/movies"
  #    - "${HOME}/volume/downloads:/downloads"
  #  restart: unless-stopped
  #
  #bazarr:
  #  image: lscr.io/linuxserver/bazarr
  #  container_name: bazarr
  #  environment:
  #    - PUID=1000
  #    - PGID=1000
  #    - TZ=America/Sao_Paulo
  #  volumes:
  #    - "${HOME}/volume/data/bazarr/config:/config"
  #    - "${HOME}/volume/downloads:/movies"
  #  restart: unless-stopped
  #
  #ubooquity:
  #  image: lscr.io/linuxserver/ubooquity
  #  container_name: ubooquity
  #  environment:
  #    - PUID=1000
  #    - PGID=1000
  #    - TZ=America/Sao_Paulo
  #    - MAXMEM=256
  #  volumes:
  #    - "${HOME}/volume/data/ubooquity:/config"
  #    - "${HOME}/volume/books:/books"
  #    - "${HOME}/volume/comics:/comics"
  #    - "${HOME}/volume/books/raw:/files"
  #  ports:
  #    - 2202:2202
  #    - 2203:2203
  #  restart: unless-stopped
  #

